#!/usr/bin/python 

import os 
import sys 
import random
from prettytable import *

VOCABULARY_FILENAME = os.getenv("HOME") + "/scripts/usefulScripts/vocabularyLearner/vocabulary.txt"
NUMBER_OF_ITEMS = 10
POL_ANG = 0

if len(sys.argv) >= 2:
    NUMBER_OF_ITEMS = int(sys.argv[1])
if len(sys.argv) >= 3:
    POL_ANG = int(sys.argv[2])


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'                        
    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''

class VocabularyResult(object):
    pol = ""
    ang = ""
    userAnswer = ""
    correctTranslation = False
    def __init__(self, pol, ang):
        super(VocabularyResult, self).__init__()
        self.pol = pol
        self.ang = ang

    
def printResults(vocabularies):
    """docstring for printResults"""
    print bcolors.WARNING + "\n=======> FINAL RESULTS <=========" + bcolors.ENDC
    number = 1
    correctAnswerNumber = 0
   
    #prepare prettyTable of results and print it
    prettyTable = PrettyTable(["Number", "Question Phrase", "Correct Translation", "User answer", "Answer correct?"])
    prettyTable.align["Question Phrase"] = "l"
    prettyTable.align["Correct Translation"] = "l"
    prettyTable.align["User answer"] = "l"
    prettyTable.padding_width = 1
    for vocabulary in vocabularies:
        if(vocabulary.correctTranslation):
            correctAnswerNumber +=1
        if(POL_ANG):
            prettyTable.add_row([str(number),vocabulary.pol, vocabulary.ang, vocabulary.userAnswer, (bcolors.OKGREEN if vocabulary.correctTranslation else bcolors.FAIL) + str(vocabulary.correctTranslation) + bcolors.ENDC])
        else:
            prettyTable.add_row([str(number),vocabulary.ang, vocabulary.pol, vocabulary.userAnswer, (bcolors.OKGREEN if vocabulary.correctTranslation else bcolors.FAIL) + str(vocabulary.correctTranslation) + bcolors.ENDC])
        number +=1
    print prettyTable

    print bcolors.WARNING + "================================="
    print "    YOUR RESULT: " + str(correctAnswerNumber) + "/" + str(NUMBER_OF_ITEMS) + " => (" + str(float(float(correctAnswerNumber)/float(NUMBER_OF_ITEMS)*100)) + " per cent" + ")"
    if correctAnswerNumber == NUMBER_OF_ITEMS:
        print "\n   !!!!!!! PERFECT RESULT - 100% - CONGRATULATIONS !!!!!!\n"
    print "=================================" + bcolors.ENDC
    
vocabularyFile = open(VOCABULARY_FILENAME, "r")
lines = vocabularyFile.readlines();

#randomize lines 
random.shuffle(lines)

#get first NUMBER_OF_ITEMS lines 
lines = lines[:NUMBER_OF_ITEMS]

vocabularies = []
for line in lines:
    splitLine = line.split(">")
    vocabularies.append(VocabularyResult(str(splitLine[1].strip()).lower(), str(splitLine[0].strip()).lower()))

print bcolors.OKGREEN + "\nTranslate below phrases from " + ("Polish to English" if POL_ANG else "English to Polish") + bcolors.ENDC
number = 0;
for vocabulary in vocabularies:
    number +=1
    if(POL_ANG):
        answer = raw_input(str(number) + "\t " + vocabulary.pol + ": ")
        print (bcolors.OKGREEN + "   CORRECT - " if (len(answer) >= 3 and answer in vocabulary.ang) else bcolors.FAIL + "   INCORRECT - ") + "correct answer: " + vocabulary.ang + "\n" + bcolors.ENDC
        vocabulary.userAnswer = answer
        if(len(answer) >= 3 and answer in vocabulary.ang):
            vocabulary.correctTranslation = True
    else: 
        answer = raw_input(str(number) + "\t " + vocabulary.ang + ": ")
        print (bcolors.OKGREEN + "   CORRECT - " if (len(answer) >= 3 and answer in vocabulary.pol) else bcolors.FAIL + "   INCORRECT - ") + "correct answer: " + vocabulary.pol +  "\n" + bcolors.ENDC
        vocabulary.userAnswer = answer
        if(len(answer) >= 3 and answer in vocabulary.pol):
            vocabulary.correctTranslation = True

printResults(vocabularies)

